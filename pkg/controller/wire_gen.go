// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package controller

import (
	"context"
	"github.com/aquaproj/aqua/pkg/config"
	"github.com/aquaproj/aqua/pkg/config-finder"
	"github.com/aquaproj/aqua/pkg/config-reader"
	"github.com/aquaproj/aqua/pkg/controller/exec"
	"github.com/aquaproj/aqua/pkg/controller/generate"
	"github.com/aquaproj/aqua/pkg/controller/initcmd"
	"github.com/aquaproj/aqua/pkg/controller/install"
	"github.com/aquaproj/aqua/pkg/controller/list"
	"github.com/aquaproj/aqua/pkg/controller/which"
	"github.com/aquaproj/aqua/pkg/download"
	"github.com/aquaproj/aqua/pkg/github"
	"github.com/aquaproj/aqua/pkg/install-registry"
	"github.com/aquaproj/aqua/pkg/installpackage"
	"github.com/aquaproj/aqua/pkg/runtime"
)

// Injectors from wire.go:

func InitializeListCommandController(ctx context.Context, aquaVersion string, param *config.Param) *list.Controller {
	configFinder := finder.NewConfigFinder()
	fileReader := reader.NewFileReader()
	configReader := reader.New(fileReader)
	rootDir := config.NewRootDir()
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(rootDir, registryDownloader)
	controller := list.NewController(configFinder, configReader, installer)
	return controller
}

func InitializeInitCommandController(ctx context.Context, aquaVersion string, param *config.Param) *initcmd.Controller {
	repositoryService := github.New(ctx)
	controller := initcmd.New(repositoryService)
	return controller
}

func InitializeGenerateCommandController(ctx context.Context, aquaVersion string, param *config.Param) *generate.Controller {
	configFinder := finder.NewConfigFinder()
	fileReader := reader.NewFileReader()
	configReader := reader.New(fileReader)
	rootDir := config.NewRootDir()
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(rootDir, registryDownloader)
	controller := generate.New(configFinder, configReader, installer, repositoryService)
	return controller
}

func InitializeInstallCommandController(ctx context.Context, param *config.Param) *install.Controller {
	rootDir := config.NewRootDir()
	configFinder := finder.NewConfigFinder()
	fileReader := reader.NewFileReader()
	configReader := reader.New(fileReader)
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(rootDir, registryDownloader)
	runtimeRuntime := runtime.New()
	packageDownloader := download.NewPackageDownloader(repositoryService, runtimeRuntime)
	installpackageInstaller := installpackage.New(rootDir, packageDownloader, runtimeRuntime)
	controller := install.New(rootDir, configFinder, configReader, installer, installpackageInstaller)
	return controller
}

func InitializeWhichCommandController(ctx context.Context, aquaVersion string, param *config.Param) which.Controller {
	rootDir := config.NewRootDir()
	configFinder := finder.NewConfigFinder()
	fileReader := reader.NewFileReader()
	configReader := reader.New(fileReader)
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(rootDir, registryDownloader)
	runtimeRuntime := runtime.New()
	controller := which.New(rootDir, configFinder, configReader, installer, runtimeRuntime)
	return controller
}

func InitializeExecCommandController(ctx context.Context, aquaVersion string, param *config.Param) *exec.Controller {
	rootDir := config.NewRootDir()
	repositoryService := github.New(ctx)
	runtimeRuntime := runtime.New()
	packageDownloader := download.NewPackageDownloader(repositoryService, runtimeRuntime)
	installer := installpackage.New(rootDir, packageDownloader, runtimeRuntime)
	configFinder := finder.NewConfigFinder()
	fileReader := reader.NewFileReader()
	configReader := reader.New(fileReader)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	registryInstaller := registry.New(rootDir, registryDownloader)
	controller := which.New(rootDir, configFinder, configReader, registryInstaller, runtimeRuntime)
	execController := exec.New(installer, controller)
	return execController
}
