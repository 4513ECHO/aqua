// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package controller

import (
	"context"
	"github.com/aquaproj/aqua/pkg/config"
	"github.com/aquaproj/aqua/pkg/config-finder"
	"github.com/aquaproj/aqua/pkg/config-reader"
	"github.com/aquaproj/aqua/pkg/controller/exec"
	"github.com/aquaproj/aqua/pkg/controller/generate"
	"github.com/aquaproj/aqua/pkg/controller/initcmd"
	"github.com/aquaproj/aqua/pkg/controller/install"
	"github.com/aquaproj/aqua/pkg/controller/list"
	"github.com/aquaproj/aqua/pkg/controller/which"
	"github.com/aquaproj/aqua/pkg/download"
	exec2 "github.com/aquaproj/aqua/pkg/exec"
	"github.com/aquaproj/aqua/pkg/github"
	"github.com/aquaproj/aqua/pkg/install-registry"
	"github.com/aquaproj/aqua/pkg/installpackage"
	"github.com/aquaproj/aqua/pkg/runtime"
	"github.com/spf13/afero"
	"github.com/suzuki-shunsuke/go-osenv/osenv"
)

// Injectors from wire.go:

func InitializeListCommandController(ctx context.Context, param *config.Param) *list.Controller {
	fs := afero.NewOsFs()
	configFinder := finder.NewConfigFinder(fs)
	configReader := reader.New(fs)
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(param, registryDownloader, fs)
	controller := list.NewController(configFinder, configReader, installer)
	return controller
}

func InitializeInitCommandController(ctx context.Context, param *config.Param) *initcmd.Controller {
	repositoryService := github.New(ctx)
	fs := afero.NewOsFs()
	controller := initcmd.New(repositoryService, fs)
	return controller
}

func InitializeGenerateCommandController(ctx context.Context, param *config.Param) *generate.Controller {
	fs := afero.NewOsFs()
	configFinder := finder.NewConfigFinder(fs)
	configReader := reader.New(fs)
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(param, registryDownloader, fs)
	fuzzyFinder := generate.NewFuzzyFinder()
	controller := generate.New(configFinder, configReader, installer, repositoryService, fs, fuzzyFinder)
	return controller
}

func InitializeInstallCommandController(ctx context.Context, param *config.Param) *install.Controller {
	fs := afero.NewOsFs()
	configFinder := finder.NewConfigFinder(fs)
	configReader := reader.New(fs)
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(param, registryDownloader, fs)
	runtimeRuntime := runtime.New()
	packageDownloader := download.NewPackageDownloader(repositoryService, runtimeRuntime)
	installpackageInstaller := installpackage.New(param, packageDownloader, runtimeRuntime, fs)
	controller := install.New(param, configFinder, configReader, installer, installpackageInstaller, fs)
	return controller
}

func InitializeWhichCommandController(ctx context.Context, param *config.Param) which.Controller {
	fs := afero.NewOsFs()
	configFinder := finder.NewConfigFinder(fs)
	configReader := reader.New(fs)
	repositoryService := github.New(ctx)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	installer := registry.New(param, registryDownloader, fs)
	runtimeRuntime := runtime.New()
	osEnv := osenv.New()
	controller := which.New(param, configFinder, configReader, installer, runtimeRuntime, osEnv, fs)
	return controller
}

func InitializeExecCommandController(ctx context.Context, param *config.Param) *exec.Controller {
	repositoryService := github.New(ctx)
	runtimeRuntime := runtime.New()
	packageDownloader := download.NewPackageDownloader(repositoryService, runtimeRuntime)
	fs := afero.NewOsFs()
	installer := installpackage.New(param, packageDownloader, runtimeRuntime, fs)
	configFinder := finder.NewConfigFinder(fs)
	configReader := reader.New(fs)
	registryDownloader := download.NewRegistryDownloader(repositoryService)
	registryInstaller := registry.New(param, registryDownloader, fs)
	osEnv := osenv.New()
	controller := which.New(param, configFinder, configReader, registryInstaller, runtimeRuntime, osEnv, fs)
	executor := exec2.New()
	execController := exec.New(installer, controller, executor, osEnv, fs)
	return execController
}
